# uniform cost function
# returns the minimum cost (Bonus: returns path to minimum cost as well)
def  uniform_cost_search(start, goal, graph, cost):
    answer = {node: {'cost': float('inf'), 'path': []} for node in range(len(graph))}
    
    # Set the cost and path for the start node
    answer[start]['cost'] = 0
    answer[start]['path'] = [start]
    
    # Create a priority queue to explore nodes with lowest cost first 
    pq = [(0, start, [])]  # (cost, node, path)
    
    # While the priority queue is not empty
    while pq:
        # Pop the node with the minimum cost
        current_cost, current_node, current_path = min(pq)
        pq.remove((current_cost, current_node, current_path))
        
        # If the current node is one of the goal nodes
        if current_node in goal:
            # Update the answer with the minimum cost and path to reach goal node
            answer[current_node]['cost'] = current_cost
            answer[current_node]['path'] = current_path + [current_node]
            continue
        
        # Iterate through neighbors of the current node
        for neighbor in graph[current_node]:
            # Calculate cost to reach the neighbor node
            neighbor_cost = current_cost + cost.get((current_node, neighbor), float('inf'))
            
            # If the calculated cost is less than the cost recorded for the neighbor
            if neighbor_cost < answer[neighbor]['cost']:
                # Update the cost and path for the neighbor node
                answer[neighbor]['cost'] = neighbor_cost
                answer[neighbor]['path'] = current_path + [current_node]
                
                # Add neighbor to the priority queue with updated cost
                pq.append((neighbor_cost, neighbor, current_path + [current_node]))


    return answer
 
# main function
if __name__ == '__main__':
     
    # create a graph with no more than 30 nodes
    graph, cost = [[] for i in range(30)], {}
 
    # add edges to the graph
    graph[0].append(4)
    graph[0].append(5)
    graph[0].append(16)
    graph[2].append(1)
    graph[3].append(1)
    graph[4].append(2)
    graph[4].append(3)
    graph[4].append(5)
    graph[5].append(8)
    graph[5].append(18)
    graph[6].append(3)
    graph[6].append(7)
    graph[8].append(16)
    graph[8].append(17)
    graph[16].append(17)
    graph[18].append(6)
    
 
    # add cost to each edge
    cost[(0, 4)] = 3
    cost[(0, 5)] = 9
    cost[(0, 16)] = 1
    cost[(2, 1)] = 2
    cost[(3, 1)] = 2
    cost[(4, 2)] = 1
    cost[(4, 3)] = 8
    cost[(4, 5)] = 2
    cost[(5, 8)] = 3
    cost[(5, 18)] = 2
    cost[(6, 3)] = 3
    cost[(6, 7)] = 2
    cost[(8, 16)] = 4
    cost[(8, 17)] = 4
    cost[(16, 17)] = 15
    cost[(18, 6)] = 1
    
    # set start state 
    start = 0
    
    # set goal state, there can be multiple goal states
    goal = [7]
    
    # call uniform_search_cost function to get the minimum cost to reach goal. Bonus points for path
    # ****** You have to implement this function *****
    min_cost_info = uniform_cost_search(start, goal, graph, cost)

    for node, info in min_cost_info.items():
        print(f'Minimum cost from {start} to {node} is {info["cost"]}')
        print(f'Path: {info["path"]}')
      
    #   **** Bonus ****
    #   print(f'Path: {info["path"]}')
